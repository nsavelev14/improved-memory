#include <string>
#include <iostream>
#include <cassert>
#include <vector>
#include <map>

using namespace std;

enum class QueryType {
  NewBus,
  BusesForStop,
  StopsForBus,
  AllBuses
};

struct Query {
  QueryType type;
  string bus;
  string stop;
  vector<string> stops;
};

istream& operator >> (istream& is, Query& q) {
    q.stops.clear();
    string qt;
    is >> qt;

    if (qt == "NEW_BUS") {
        
        q.type = QueryType::NewBus;
        cin >> q.bus;
        int stop_count;
        is >> stop_count;
        for (int i = 0; i < stop_count; ++i) {
            string stop;
            is >> stop;
            q.stops.push_back(stop);
            
        }
        
    } else {
        if (qt == "BUSES_FOR_STOP") {
            
            q.type = QueryType::BusesForStop;
            is >> q.stop;
            
        } else {
            if (qt == "STOPS_FOR_BUS") {
                
                q.type = QueryType::StopsForBus;
                is >> q.bus;
               
                
            } else {
                if (qt == "ALL_BUSES") {
                    q.type = QueryType::AllBuses;
                }
            }
        }
    }
        
  return is;
}

struct BusesForStopResponse {
    string stop;
    map<string, vector<string>>  stops_to_buses;
};

ostream& operator << (ostream& os, const BusesForStopResponse& r) {
  if (r.stops_to_buses.count(r.stop) == 0) {
    os << "No stop" ;
  } else {
    for (const string& bus : r.stops_to_buses.at(r.stop)) {
      os << bus << " ";
    }
  }
  return os;
}

struct StopsForBusResponse {
    string bus;
    map<string, vector<string>> buses_to_stops;
    map<string, vector<string>> stops_to_buses;
};

ostream& operator << (ostream& os, const StopsForBusResponse& r) {
    
  if (r.buses_to_stops.count(r.bus) == 0) {
    os << "No bus";
  } else {
      size_t i = 0;
    for (const string& stop : r.buses_to_stops.at(r.bus)) {
        //cout << r.buses_to_stops.at(r.bus).size() << " " << i ;
      os << "Stop " << stop << ": ";
      if (r.stops_to_buses.at(stop).size() == 1) {
        os << "no interchange";
      } else {
         
        for (const string& other_bus : r.stops_to_buses.at(stop)) {
          if (r.bus != other_bus) {
            os << other_bus << " ";
          }
        }
      }
        
        if (i + 1 < r.buses_to_stops.at(r.bus).size()) {
            os << endl;
        }
        i++;
    }
  }
  return os;
}

struct AllBusesResponse {
  map<string, vector<string>> buses_to_stops;
};

ostream& operator << (ostream& os, const AllBusesResponse& r) {
    
  if (r.buses_to_stops.empty()) {
    os << "No buses" ;
  } else {
      size_t i = 0;
    for (const auto& bus_item : r.buses_to_stops) {
      os << "Bus " << bus_item.first << ": ";
      for (const string& stop : bus_item.second) {
        os << stop << " ";
      }
        if (i + 1 < r.buses_to_stops.size())
        os << endl;
        i++;
    }
  }

  return os;
}

class BusManager {
public:
  void AddBus(const string& bus, const vector<string>& stops) {
      
      vector<string>& st = buses_to_stops[bus];
      
      for (const string& stop : stops) {
          
          st.push_back(stop);
          stops_to_buses[stop].push_back(bus);
          
         }
  }

  BusesForStopResponse GetBusesForStop(const string& stop) const {
      BusesForStopResponse r;
      r.stop = stop;
      r.stops_to_buses = stops_to_buses;
      return r;
  }

  StopsForBusResponse GetStopsForBus(const string& bus) const {
      StopsForBusResponse r;
      r.bus = bus;
      r.stops_to_buses = stops_to_buses;
      r.buses_to_stops = buses_to_stops;
      return r;
  }

  AllBusesResponse GetAllBuses() const {
      AllBusesResponse r;
      r.buses_to_stops = buses_to_stops;
      return r;
  }
private:
    map<string, vector<string>> buses_to_stops, stops_to_buses;
};



int main() {
  int query_count;
  Query q;

  cin >> query_count;

  BusManager bm;
  for (int i = 0; i < query_count; ++i) {
    cin >> q;
    switch (q.type) {
    case QueryType::NewBus:
      bm.AddBus(q.bus, q.stops);
      break;
    case QueryType::BusesForStop:
      cout << bm.GetBusesForStop(q.stop) << endl;
      break;
    case QueryType::StopsForBus:
      cout << bm.GetStopsForBus(q.bus) << endl;
      break;
    case QueryType::AllBuses:
      cout << bm.GetAllBuses() << endl;
      break;
    }
  }

  return 0;
}

