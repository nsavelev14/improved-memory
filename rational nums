#include <iostream>
#include <cmath>
#include <sstream>
#include <set>
#include <map>
#include <vector>
using namespace std;

class Rational {
public:
    Rational() {
        num = 0;
        denom = 1;
    }

    Rational(int numerator, int denominator) {
        int n = abs(numerator);
        int d = abs(denominator);
        int nod;
        while (n > 0 && d > 0) {
          
          // возьмём большее из чисел и заменим его остатком от деления на второе
          // если a и b делятся на x, то a - b и b делятся на x
          // тогда и a % b и b делятся на x, так что можно a заменить на a % b
            
          if (n > d) {
            n %= d;
          } else {
            d %= n;
          }
          
        }
        nod = n + d;
        
        numerator /= nod;
        denominator /= nod;
        
        if (numerator < 0 && denominator < 0) {
            numerator = abs(numerator);
            denominator = abs(denominator);
        }
        else {
            if (numerator == 0) {
                denominator = 1;
            }
            else {
                if (numerator > 0 && denominator < 0) {
                    numerator *= -1;
                    denominator *= -1;
                }
            }
        }
        
        num = numerator;
        denom = denominator;

    }

    int Numerator() const {
        return num;
    }

    int Denominator() const {
        return denom;
    }

private:
    int num;
    int denom;
};

bool operator== (const Rational& lhs, const Rational& rhs) {
    return lhs.Numerator() == rhs.Numerator() && lhs.Denominator() == rhs.Denominator();
}

Rational operator+ (const Rational& lhs, const Rational& rhs){
    const int& ln = lhs.Numerator();
    const int& rn = rhs.Numerator();
    const int& ld = lhs.Denominator();
    const int& rd = rhs.Denominator();
    
    if (ld == rd) {
        return Rational(ln + rn, ld);
    }
    else {
        return Rational(
                         ln * rd + rn * ld,
                         ld*rd
                        );
    }
}

Rational operator- (const Rational& lhs, const Rational& rhs) {
    const int& ln = lhs.Numerator();
    const int& rn = rhs.Numerator();
    const int& ld = lhs.Denominator();
    const int& rd = rhs.Denominator();
    
    if (ld == rd) {
           return Rational(ln - rn, ld);
    }
    else {
        return Rational(
                         ln * rd - rn * ld,
                         ld*rd
                        );
    }
}

Rational operator* (const Rational& lhs, const Rational& rhs) {
    return Rational (
                      lhs.Numerator() * rhs.Numerator(),
                      lhs.Denominator() * rhs.Denominator()
                     );
}

Rational operator/ (const Rational& lhs, const Rational& rhs) {
    return Rational (
                      lhs.Numerator() * rhs.Denominator(),
                      lhs.Denominator() * rhs.Numerator()
                     );
}

ostream& operator<< (ostream& stream, const Rational& r) {

    stream << r.Numerator() << '/' << r.Denominator();
    return stream;
}

 istream& operator>> (istream& stream, Rational& r) {
     if (stream.peek() == EOF)
         return stream;
     
     int num;
     int denom;
     stream >> num;
     stream.ignore(1);
     stream >> denom;
     r = {num, denom};
     
     return stream;
}

bool operator< (const Rational& lhs, const Rational& rhs) {
    const int& ln = lhs.Numerator();
    const int& rn = rhs.Numerator();
    const int& ld = lhs.Denominator();
    const int& rd = rhs.Denominator();
    
    if (ld == rd) {
        return ln < rn;
    }
    else {
        if (ln == rn) {
            return rd < ld;
        }
        else {
            return ln * rd < rn * ld;
        }
    }
}
